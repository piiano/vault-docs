openapi: 3.0.3
info:
  x-text-ref-description: '../overview.md'
  contact:
    name: Us
    url: https://piiano.com/contact-us/
  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  title: Piiano Vault REST API
  version: '1.0'

servers:
  - url: http://localhost:8123

tags:
  - description: The collection endpoints allow you to create, retrieve and update collections.
    name: Collections
  - description: The Property types and transformations endpoints allow you to list available types and transformations for properties.
    name: Data types and transformations
  - description: The object endpoints allow you to add, retrieve and update objects.
    name: Objects
  - description: The token endpoints allow you to tokenize, detokenize, update and delete tokens.
    name: Tokens
  - description: The IAM (identity and access management) endpoints allow you to set and retrieve IAM configuration, and to regenerate user API keys.
    name: IAM
  - description: The config vars endpoints allow you to set and retrieve dynamic configuration variables.
    name: Config Vars
  - description: The system endpoint allow you to retrieve system components status and Vault version.
    name: System

paths:
  /api/pvlt/1.0/ctl/collections:
    get:
      operationId: get-all-collections
      summary: List collections
      x-text-ref-description: './control/GetAllCollections.md'
      parameters:
        - $ref: '#/components/parameters/jsonOrPvSchemaFormat'
        - description: |
            Options for the operation. Options include:
            - `show_builtins` – show built-in properties from response.
          in: query
          name: options
          schema:
            items:
              enum:
                - show_builtins
              type: string
            type: array
      responses:
        200:
          description: The request is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 1
    post:
      operationId: add-collection
      summary: Add collection
      x-text-ref-description: './control/AddCollection.md'
      parameters:
        - $ref: '#/components/parameters/jsonOrPvSchemaFormat'
        - description: |
            Options for the operation. Options include:
            - `show_builtins` – show built-in properties from response.
          in: query
          name: options
          schema:
            items:
              enum:
                - show_builtins
              type: string
            type: array
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Collection'
          application/pvschema:
            schema:
              type: string
        description: Details of the collection including its properties.
        required: true
        x-originalParamName: collection
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 3
  /api/pvlt/1.0/ctl/collections/{collection}:
    delete:
      operationId: delete-collection
      summary: Delete collection
      x-text-ref-description: './control/DeleteCollection.md'
      parameters:
        - $ref: '#/components/parameters/collection'
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection is not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 5
    get:
      operationId: get-collection
      summary: Get collection details
      x-text-ref-description: './control/GetCollection.md'
      parameters:
        - $ref: '#/components/parameters/collection'
        - $ref: '#/components/parameters/jsonOrPvSchemaFormat'
        - description: |
            Options for the operation. Options include:
            - `show_builtins` – show built-in properties from response.
          in: query
          name: options
          schema:
            items:
              enum:
                - show_builtins
              type: string
            type: array
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 2
    patch:
      operationId: update-collection
      summary: Update collection details
      x-text-ref-description: './control/UpdateCollection.md'
      parameters:
        - description: The name of the collection to import the properties to.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/jsonOrPvSchemaFormat'
        - description: |
            Options for the operation. Options include:
            - `show_builtins` – show built-in properties from response.
          in: query
          name: options
          schema:
            items:
              enum:
                - show_builtins
              type: string
            type: array
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Collection'
          application/pvschema:
            schema:
              type: string
        description: Details of the collection including its properties.
        required: true
        x-originalParamName: collectionChanges
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Collection'
            application/pvschema:
              schema:
                type: string
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        500:
          $ref: '#/components/responses/500'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 4
  /api/pvlt/1.0/ctl/collections/{collection}/properties:
    get:
      operationId: list-collection-properties
      summary: List collection properties
      x-text-ref-description: './control/ListProperties.md'
      parameters:
        - description: The name of the collection containing the properties.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: |
            Options for the operation. Options include: 
            - `show_builtins` – show built-in properties from response.
          in: query
          name: options
          schema:
            items:
              enum:
                - show_builtins
              type: string
            type: array
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.Property'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 2
  /api/pvlt/1.0/ctl/collections/{collection}/properties/{property}:
    delete:
      operationId: delete-collection-property
      summary: Delete collection property
      x-text-ref-description: './control/DeleteProperty.md'
      parameters:
        - description: The name of the collection containing the property.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The name of the property.
          in: path
          name: property
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 6
    get:
      operationId: get-collection-property
      summary: Get collection property
      x-text-ref-description: './control/GetProperty.md'
      parameters:
        - description: The ID of the collection containing the property.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The name of the property.
          in: path
          name: property
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Property'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 4
    patch:
      operationId: update-collection-property
      summary: Update collection property
      x-text-ref-description: './control/UpdateProperty.md'
      parameters:
        - description: The name of the collection containing the property.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The name of the property.
          in: path
          name: property
          required: true
          schema:
            type: string
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Property'
        description: property info
        required: true
        x-originalParamName: property
      responses:
        200:
          description: Property updated successfully
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or property wasn't found.
        500:
          $ref: '#/components/responses/500'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 5
    post:
      operationId: add-collection-property
      summary: Add collection property
      x-text-ref-description: './control/AddProperty.md'
      parameters:
        - description: The name of the collection to add the property to.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The name of the property to add.
          in: path
          name: property
          required: true
          schema:
            type: string
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Property'
        description: Details of the property.
        required: true
        x-originalParamName: property
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Property'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Collections
      x-docs-sidebar-precedence: 3
  /api/pvlt/1.0/ctl/iam/conf:
    get:
      operationId: get-iam-conf
      summary: Get IAM configuration
      x-text-ref-description: './control/GetIAMConf.md'
      responses:
        200:
          content:
            application/toml:
              schema:
                $ref: '#/components/schemas/auth.Config'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - IAM
    post:
      operationId: set-iam-conf
      summary: Set IAM configuration
      x-text-ref-description: './control/SetIAMConf.md'
      requestBody:
        x-has-pii: false
        content:
          application/toml:
            schema:
              $ref: '#/components/schemas/auth.Config'
        description: IAM configuration in TOML format.
        required: true
        x-originalParamName: auth_config
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - IAM
  /api/pvlt/1.0/ctl/iam/user/regen:
    post:
      operationId: regenerate-user-api-key
      summary: Regenerate user API key
      x-text-ref-description: './control/RegenerateUserAPIKey.md'
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.UserName'
        description: The name of the user to regenerate API key for.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.APIKey'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The user is not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - IAM
  /api/pvlt/1.0/ctl/info/health:
    get:
      operationId: control-health
      summary: Get control service status
      x-text-ref-description: './control/Health.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Health'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      tags:
        - System
      x-docs-sidebar-precedence: 9
  /api/pvlt/1.0/ctl/transformations:
    get:
      operationId: list-transformations
      summary: List transformations
      x-text-ref-description: './control/ListTransformations.md'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TransformationDoc'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Data types and transformations
      x-docs-sidebar-precedence: 7
  /api/pvlt/1.0/ctl/types:
    get:
      operationId: list-property-types
      summary: List property types
      x-text-ref-description: './control/ListPropertyTypes.md'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/piitype.PIIType'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Data types and transformations
      x-docs-sidebar-precedence: 8
  /api/pvlt/1.0/ctl/info/cluster:
    get:
      operationId: get-cluster-info
      summary: Get cluster information
      x-text-ref-description: './control/GetClusterInfo.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.AllGenerations'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: [ ]
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/data/collections/{collection}/objects:
    delete:
      operationId: delete-object-by-id
      summary: Delete object
      x-text-ref-description: './data/DeleteObjectByID.md'
      parameters:
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The ID of the object.
          in: query
          name: id
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
            maxLength: 1
        - description: |
            Options for the operation. Options include:
            - `hard_delete` – permanently delete the objects.
            - `deleted` – remove only deleted objects, requires `hard_delete` to be specified.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or object is not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 6
    get:
      operationId: get-objects
      summary: List objects
      x-text-ref-description: './data/GetObjects.md'
      parameters:
        - description: The name of the collection containing the objects.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/cursor'
        - description: A comma-separated list of object IDs. If not provided, all objects are returned. The number of IDs provided cannot exceed the default page size.
          in: query
          name: id
          schema:
            type: array
            items:
              type: string
              format: uuid
        - description: |
            Options for the operation. Options include:
            - `unsafe` – fetch all the properties, cannot be specified with `props`.
            - `show_builtins` – show built-in properties, can only be specified with `unsafe`.
            - `deleted` – get only deleted objects.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.
          in: query
          name: props
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, properties or object isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 1
    patch:
      operationId: update-object-by-id
      summary: Update object
      x-text-ref-description: './data/UpdateObjectByID.md'
      parameters:
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The ID of the object.
          in: query
          name: id
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
            maxItems: 1
            minItems: 1
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
        - description: 'Object time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.'
          in: query
          name: ttl
          schema:
            # This is intentionally a `string` and intentionally with `*`.
            # Our code differentiate between 3 situations:
            #
            #  not sending TTL in query - use the default TTL
            #  sending empty TTL in query (`?ttl=` - an empty string) - set TTL to null
            #  sending TTL with value (e.g. `?ttl=10`, `?ttl=0`) - set TTL to the value sent
            type: string
            pattern: '^[0-9]*$'
        - description: |
            Options for the operation. Options include:
            - `deleted` – update only deleted objects.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
      requestBody:
        x-has-pii: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Object'
        description: The object properties to update.
        required: true
        x-originalParamName: object
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, properties, or object is not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 5
    post:
      operationId: add-object
      summary: Add object
      x-text-ref-description: './data/AddObject.md'
      parameters:
        - description: The name of the collection to add the object to.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
        - description: 'Object time to live (TTL) in seconds, cannot be set to 0. If not set, the default TTL is used. See the `PVAULT_TTL_ASSOCIATED_OBJECTS` and `PVAULT_TTL_UNASSOCIATED_OBJECTS` time to live environment variables.'
          in: query
          name: ttl
          schema:
            type: string
            pattern: '^[0-9]*$'
      requestBody:
        x-has-pii: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Object'
        description: The object details.
        required: true
        x-originalParamName: object
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectID'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or properties isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 4
  /api/pvlt/1.0/data/collections/{collection}/properties/{property}:
    get:
      operationId: get-objects-property
      summary: Get objects property
      x-text-ref-description: './data/GetObjectsProperty.md'
      parameters:
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/cursor'
        - description: The name of the collection containing the objects.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - description: The required property.
          in: path
          name: property
          required: true
          schema:
            type: string
        - description: |
            Options for the operation. Options include:
            - `deleted` – get only deleted objects.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: The ID of the object. If not given - return all objects
          in: query
          name: id
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, properties or object isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 2
  /api/pvlt/1.0/data/collections/{collection}/query/objects:
    post:
      operationId: search-objects
      summary: Search objects
      x-text-ref-description: './data/SearchObjects.md'
      parameters:
        - description: The name of the collection containing the objects.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/cursor'
        - description: |
            Options for the operation. Options include:
            - `unsafe` – fetch all the properties, cannot be specified with `props`.
            - `show_builtins` – show built-in properties, can only be specified with `unsafe`.
            - `deleted` – get only deleted objects.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: The list of property names and transformations. To include multiple names and transformation bindings, provide a comma-separated list. For example, `props=first_name,last_name`. If the `unsafe` option is used, must be empty.
          in: query
          name: props
          schema:
            type: array
            items:
              type: string
      requestBody:
        x-has-pii: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.Query'
        description: |
          The query.
          This is a JSON object consisting of property keys and match values.
          For example:
          ```json
          {
            "match": {
              "first_name": "John",
              "last_name": "Doe"
            }
          }
          ```
          is the equivalent to:
          ```sql
          where first_name = "John" AND last_name="Doe"
          ```
        required: true
        x-originalParamName: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ObjectFieldsPage'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or properties isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Objects
      x-docs-sidebar-precedence: 3
  /api/pvlt/1.0/data/collections/{collection}/query/tokens:
    post:
      operationId: search-tokens
      summary: Search tokens
      x-text-ref-description: './data/SearchTokens.md'
      parameters:
        - description: |
            Options for the operation. Options include:
            - `deleted` – get only deleted tokens.
          in: query
          name: options
          schema:
            type: array
            items:
              type: string
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      requestBody:
        x-has-pii: false
        description: 'The query. This is a JSON object consisting of query filters.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.QueryToken'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TokenMetadata'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, token, or referenced object or property was not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Tokens
      x-docs-sidebar-precedence: 6
  /api/pvlt/1.0/data/collections/{collection}/tokens:
    delete:
      operationId: delete-tokens
      summary: Delete tokens
      x-text-ref-description: './data/DeleteTokens.md'
      parameters:
        - description: Comma-separated list of object IDs.
          in: query
          name: object_id
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of tags.
          in: query
          name: tag
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of token IDs.
          in: query
          name: token_id
          schema:
            items:
              type: string
            type: array
        - description: |
            Options for the operation. Options include:
            - `hard_delete` – permanently delete the tokens.
            - `deleted` – remove only deleted tokens, requires `hard_delete` to be specified.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection or token isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Tokens
      x-docs-sidebar-precedence: 3
    get:
      operationId: detokenize
      summary: Detokenize tokens
      x-text-ref-description: './data/Detokenize.md'
      parameters:
        - description: Comma-separated list of object IDs.
          in: query
          name: object_id
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of options.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of tags.
          in: query
          name: tag
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of token IDs.
          in: query
          name: token_id
          schema:
            items:
              type: string
            type: array
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.DetokenizedToken'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, properties, referenced objects or token isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Tokens
      x-docs-sidebar-precedence: 2
    patch:
      operationId: update-tokens
      summary: Update tokens
      x-text-ref-description: './data/UpdateTokens.md'
      parameters:
        - description: Token time to live (TTL) in seconds. If not set, the token's expiry date is not changed.
          in: query
          name: ttl
          schema:
            type: string
            pattern: '^[0-9]*$'
        - description: Comma-separated list of object IDs.
          in: query
          name: object_id
          schema:
            type: array
            items:
              type: string
              format: uuid
        - description: Comma-separated list of tags.
          in: query
          name: tag
          schema:
            items:
              type: string
            type: array
        - description: Comma-separated list of token IDs.
          in: query
          name: token_id
          schema:
            items:
              type: string
            type: array
        - description: |
            Options for the operation. Options include:
            - `deleted` – update only deleted tokens.
          in: query
          name: options
          schema:
            items:
              type: string
            type: array
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.UpdateTokenRequest'
        description: Update token request details.
        required: true
        x-originalParamName: body
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, token, or referenced object or property was not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Tokens
      x-docs-sidebar-precedence: 4
    post:
      operationId: tokenize
      summary: Tokenize properties of an object data
      x-text-ref-description: './data/Tokenize.md'
      parameters:
        - description: 'Token time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_TOKENS` time to live environment variable.'
          in: query
          name: ttl
          schema:
            type: string
            pattern: '^[0-9]*$'
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.TokenizeRequest'
        description: Details of the object and property.
        required: true
        x-originalParamName: object_prop
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TokenValue'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, properties or referenced objects isn't found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Tokens
      x-docs-sidebar-precedence: 1
  /api/pvlt/1.0/data/collections/{collection}/rotate/tokens:
    post:
      operationId: rotate-tokens
      summary: Rotate tokens
      x-text-ref-description: './data/RotateTokens.md'

      parameters:
        - description: Comma-separated list of token IDs.
          in: query
          name: token_id
          required: true
          schema:
            items:
              type: string
            type: array
        - description: The name of the collection containing the object.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.RotatedToken'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rest.HTTPError'
          description: The collection, token, or referenced object or property was not found.
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: [ ]

      tags:
        - Tokens
      x-docs-sidebar-precedence: 5
  /api/pvlt/1.0/data/info/health:
    get:
      operationId: data-health
      summary: Get data service status
      x-text-ref-description: './data/Health.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Health'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      tags:
        - System
      x-docs-sidebar-precedence: 8
  /api/pvlt/1.0/system/admin/keys/rotate:
    post:
      operationId: rotate-keys
      summary: Rotate data encryption keys
      x-text-ref-description: './control/RotateKeysets.md'
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
  /api/pvlt/1.0/system/admin/lifecycle/gc:
    post:
      operationId: garbage-collection
      summary: Purge expired and soft deleted objects and tokens
      x-text-ref-description: './data/GarbageCollection.md'
      parameters:
        - description: 'Filter for the GC operation. Options include: `objects_only`,`tokens_only`.'
          in: query
          name: filter
          schema:
            default: all
            enum:
              - objects_only
              - tokens_only
              - all
            type: string
        - description: Runs dry run GC if set to true.
          in: query
          name: dry_run
          schema:
            default: false
            type: boolean
        - $ref: '#/components/parameters/adhoc_reason'
        - $ref: '#/components/parameters/reason'
        - $ref: '#/components/parameters/reload_cache'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/gc.DeletionCount'
                type: array
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/system/confvar:
    delete:
      operationId: clear-all-conf-vars
      summary: Clear configuration variables
      x-text-ref-description: './control/ClearAllConfVars.md'
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Config Vars
  /api/pvlt/1.0/system/confvar/{name}:
    get:
      operationId: get-conf-var
      summary: Get configuration variable
      x-text-ref-description: './control/GetConfVar.md'
      parameters:
        - description: The name of the configuration variable.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ConfVar'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Config Vars
    post:
      operationId: set-conf-var
      summary: Set configuration variable
      x-text-ref-description: './control/SetConfVar.md'
      parameters:
        - description: The name of the configuration variable.
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        x-has-pii: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/models.ConfVarValue'
        description: Value of the configuration.
        required: true
        x-originalParamName: value
      responses:
        200:
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - Config Vars
  /api/pvlt/1.0/system/debug/error/trigger:
    post:
      operationId: trigger-error
      summary: Trigger an artificial error
      x-text-ref-description: './control/Error.md'
      responses:
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/500'
        403:
          $ref: '#/components/responses/500'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/system/info/configuration:
    get:
      operationId: get-configuration
      summary: Get system configuration
      x-text-ref-description: './control/Configuration.md'
      responses:
        200:
          content:
            application/toml:
              schema:
                $ref: '#/components/schemas/config.Config'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/system/info/license:
    get:
      operationId: get-license
      summary: Get license
      x-text-ref-description: './control/License.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.License'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/system/info/version:
    get:
      operationId: get-vault-version
      summary: Get Vault version
      x-text-ref-description: './control/Version.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ProductVersion'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System
      x-docs-sidebar-precedence: 10
  /api/pvlt/1.0/system/info/kms:
    get:
      operationId: get-kms
      summary: Get KMS status
      x-text-ref-description: './control/GetKMSStatus.md'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.KMSStatus'
          description: The request is successful.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
      security:
        - bearerAuth: []
      tags:
        - System

components:
  parameters:
    jsonOrPvSchemaFormat:
      description: When set to `pvschema`, returns the collection in the PVSchema format. Otherwise, returns the JSON format.
      in: query
      name: format
      schema:
        type: string
        enum:
          - pvschema
          - json
        default: json
    collection:
      description: The name of the collection.
      in: path
      name: collection
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
    page_size:
      description: The maximum number of items to return in this request. If not specified, the default value is used. The default value is the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`. The value must not exceed the value specified in the environment variable `PVAULT_SERVICE_DEFAULT_PAGE_SIZE`
      in: query
      name: page_size
      schema:
        type: integer
    cursor:
      description: 'The cursor represents the state of consecutive queries for the same request parameters. In the first call, the cursor may be omitted or specified as an empty string. In consecutive calls, it should be set to the value of the cursor field of the models.ObjectFieldsPage returned by the previous call. Note: when the `id` is specified, paging is not supported. In this case, if the number of `id` values specified exceeds the maximum page size, the method returns 400 (BAD REQUEST).'
      in: query
      name: cursor
      schema:
        type: string
    adhoc_reason:
      name: adhoc_reason
      description: An ad-hoc reason for accessing the Vault data.
      in: query
      schema:
        type: string
    reason:
      name: reason
      description: Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
      in: query
      required: true
      schema:
        enum:
          - AppFunctionality
          - Analytics
          - Notifications
          - Marketing
          - ThirdPartyMarketing
          - FraudPreventionSecurityAndCompliance
          - AccountManagement
          - Maintenance
          - DataSubjectRequest
          - Other
        type: string
    reload_cache:
      name: reload_cache
      description: Reloads the cache before the action.
      in: query
      schema:
        type: boolean
  responses:
    400:
      description: The request is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1001
            message: The access reason is missing.
            context:
              reason: null
    401:
      description: Authentication credentials are incorrect or missing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1005
            message: The request is unauthorized.
            context: {}
    403:
      description: The caller doesn't have the required access rights.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1007
            message: The operation is forbidden due to missing capabilities.
            context:
              username: WebServer
    404:
      description: The requested resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1004
            message: The collection is not found.
            context: {}
    500:
      description: An error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1000
            message: Something went wrong
            context: {}
    501:
      description: Not implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV2001
            message: This operation is not implemented.
            context: {}
    503:
      description: The service is unavailable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/rest.HTTPError'
          example:
            error_code: PV1009
            message: The operation timed out on the server.
            context: {}
  schemas:
    models.ObjectID:
      type: object
      additionalProperties: false
      properties:
        _id:
          type: string
          format: uuid
    models.UserName:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
    auth.Config:
      type: object
      additionalProperties: false
      properties:
        policies:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/auth.Policy'
        roles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/auth.Role'
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/auth.User'
    auth.Policy:
      type: object
      additionalProperties: false
      properties:
        operations:
          type: array
          items:
            type: string
        policyType:
          type: string
        reasons:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: string
    auth.Role:
      type: object
      additionalProperties: false
      properties:
        capabilities:
          type: array
          items:
            type: string
        policies:
          type: array
          items:
            type: string
    auth.User:
      type: object
      additionalProperties: false
      properties:
        disabled:
          type: boolean
        role:
          type: string
    config.Config:
      type: object
      additionalProperties: false
      properties:
        db:
          $ref: '#/components/schemas/config.DB'
        devmode:
          type: boolean
        features:
          $ref: '#/components/schemas/config.Features'
        kms:
          $ref: '#/components/schemas/config.KMS'
        log:
          $ref: '#/components/schemas/config.Log'
        sentry:
          $ref: '#/components/schemas/config.Sentry'
        service:
          $ref: '#/components/schemas/config.Service'
        tls:
          $ref: '#/components/schemas/config.TLS'
        ttl:
          $ref: '#/components/schemas/config.TTL'
    config.DB:
      type: object
      additionalProperties: false
      properties:
        conn_max_lifetime_minutes:
          type: integer
        gc:
          $ref: '#/components/schemas/config.GC'
        hostname:
          type: string
        max_idle_conns:
          type: integer
        max_open_conns:
          type: integer
        migration:
          $ref: '#/components/schemas/config.Migration'
        name:
          type: string
        password:
          type: string
        port:
          type: integer
        require_tls:
          type: boolean
        user:
          type: string
    config.Features:
      type: object
      additionalProperties: false
      properties:
        api_key_hashing:
          type: boolean
        encryption:
          type: boolean
        policy_enforcement:
          type: boolean
        mask_license:
          type: boolean
    config.GC:
      type: object
      additionalProperties: false
      properties:
        batch_size:
          type: integer
        grace_period_days:
          type: integer
    config.KMS:
      type: object
      additionalProperties: false
      properties:
        cache_enable:
          type: boolean
        seed:
          type: string
        uri:
          type: string
    config.Log:
      type: object
      additionalProperties: false
      properties:
        customer_env:
          type: string
        customer_identifier:
          type: string
        datadog_apm_enable:
          type: boolean
        datadog_enable:
          type: boolean
        datadog_env:
          type: string
        level:
          type: string
    config.Migration:
      type: object
      additionalProperties: false
      properties:
        auto_run:
          type: boolean
        enable_retries:
          type: boolean
        initial_wait_between_retries:
          type: integer
        max_retries:
          type: integer
        max_wait_between_retries:
          type: integer
    config.Sentry:
      type: object
      additionalProperties: false
      properties:
        enable:
          type: boolean
    config.Service:
      type: object
      additionalProperties: false
      properties:
        admin_api_key:
          type: string
        admin_may_read_data:
          type: boolean
        default_page_size:
          type: integer
        force_access_reason:
          type: boolean
        listen_addr:
          type: string
        max_page_size:
          type: integer
        timeout_seconds:
          type: number
        cache_refresh_interval_seconds:
          type: number
        license:
          type: string
    config.TLS:
      type: object
      additionalProperties: false
      properties:
        cert_file:
          type: string
        enable:
          type: boolean
        key_file:
          type: string
        selfsigned:
          type: boolean
    config.TTL:
      type: object
      additionalProperties: false
      properties:
        associated_objects:
          type: integer
        tokens:
          type: integer
        unassociated_objects:
          type: integer
    gc.DeletionCount:
      type: object
      additionalProperties: false
      properties:
        collection_name:
          type: string
        collection_type:
          type: string
        count:
          type: integer
    models.Collection:
      type: object
      additionalProperties: false
      properties:
        creation_time:
          type: string
          format: date-time
          readOnly: true
          description: The time when the collection was created in an RFC3339 format.
          example: '2022-07-05T08:47:12.047Z'
        modification_time:
          type: string
          format: date-time
          readOnly: true
          description: The time when the collection was last modified in an RFC3339 format.
          example: '2022-07-05T08:47:12.047Z'
        name:
          type: string
          description: The name of the collection.
          example: employees
        properties:
          type: array
          items:
            $ref: '#/components/schemas/models.Property'
        type:
          type: string
          description: The schema prototype the collection is based on.
          enum:
            - PERSONS
            - DATA
          example: PERSONS
      required:
        - name
        - type
    models.ConfVar:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The name of the configuration variable.
          example: log_level
          type: string
        value:
          description: The value of the configuration variable.
    models.License:
      type: object
      additionalProperties: false
      properties:
        key:
          description: The full license activation key.
          type: string
        expiration:
          description: The expiration date of the token in an RFC3339 format.
          example: '2022-07-05T08:47:12.047Z'
          type: string
          format: date-time
    models.ConfVarValue:
      type: object
      additionalProperties: false
      properties:
        value:
          description: The value of the configuration variable.
    models.ConfigurationDoc:
      description: Additional information about the transformation, as key-value pairs.
      type: object
      additionalProperties: false
      properties:
        non_masked_length:
          description: Example transformation control key, in this case controlling the number of characters not masked in a data type.
          example: 4
          type: integer
    models.DetokenizedToken:
      type: object
      additionalProperties: false
      properties:
        fields:
          $ref: '#/components/schemas/models.ObjectFields'
        token_id:
          type: string
    models.Health:
      type: object
      additionalProperties: false
      properties:
        status:
          description: The status of the service.
          example: pass
          type: string
    models.KMSStatus:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The type of the configured KMS
          example: AWS
          type: string
    models.Object:
      type: object
      additionalProperties: true
      example:
        date_of_birth: 1993-02-22
        email: patfar@example.com
        first_name: Pat
        foreign_id: ff5ced0b-0788-4cfa-8235-76e6098f11cb
        gender: Female
        last_name: Far
        other_emails:
          - pf@example.com
          - pfar@example.com
        other_phone_numbers:
          - +120220202020
          - +130330303030
        phone_number: +110110101010
        tenant_id: 6168d7c6-ee0d-4b63-8efb-24a8ca361fb4
        zip_code_us: 10101
      properties:
        _id:
          description: The ID of the object.
          example: b86718a3-f4a7-4e40-bb59-681f22b62649
          readOnly: true
          type: string
    models.ObjectFields:
      type: object
      additionalProperties: true
    models.ObjectFieldsPage:
      type: object
      additionalProperties: false
      properties:
        results:
          description: The page objects.
          type: array
          items:
            $ref: '#/components/schemas/models.ObjectFields'
        paging:
          $ref: '#/components/schemas/models.Paging'
    models.Paging:
      description: Pagination information.
      type: object
      additionalProperties: false
      properties:
        size:
          type: number
          description: Number of results in the current page.
        remaining_count:
          type: number
          description: The remaining number of objects that can be read in ensuing calls to this method.
        cursor:
          type: string
          description: An opaque string you should provide to get the next page.
    models.ProductVersion:
      type: object
      additionalProperties: false
      properties:
        db_schema_version:
          type: integer
        vault_id:
          example: '1525298622245191836'
          type: string
        vault_version:
          description: The version of a Vault specified as a string consisting of version number, build number, and edition.
          example: 0.9.5.1-g2be0eb7e
          type: string
    models.Property:
      type: object
      additionalProperties: false
      properties:
        creation_time:
          description: The time when the property was created in an RFC3339 format.
          example: '2022-07-05T08:47:12.047Z'
          readOnly: true
          type: string
          format: date-time
        description:
          description: The description of the property, If not provided, is set to an empty String.
          example: The object's middle name.
          type: string
        is_builtin:
          default: false
          description: Whether the property is created by Vault (or by the user)
          example: true
          type: boolean
          readOnly: true
        is_encrypted:
          default: false
          description: Whether the value is stored encrypted and decrypted when retrieved by a caller. Encryption provides extra protection against a malicious actor gaining access to the backend storage.
          example: true
          type: boolean
        is_index:
          default: false
          description: Whether the backend storage is optimized for searches on this value.
          example: false
          type: boolean
        is_nullable:
          default: false
          description: Whether the value of the field can be removed (set to null).
          example: true
          type: boolean
        is_readonly:
          default: false
          description: When is_builtin is true, whether the user can modify values of this property.
          example: true
          type: boolean
          readOnly: true
        is_unique:
          default: false
          description: Whether the backend storage enforces unique values.
          example: false
          type: boolean
        modification_time:
          description: The time when the property was last modified in an RFC3339 format.
          example: '2022-07-05T08:47:12.047Z'
          readOnly: true
          type: string
          format: date-time
        name:
          description: The name of the property. This is the name of the column in the data_{collection_name} table. Must be unique.
          example: middle_name
          type: string
        pii_type_name:
          description: The name of the property type.
          example: STRING
          type: string
      required:
        - name
        - pii_type_name
    models.Query:
      type: object
      additionalProperties: false
      properties:
        match:
          $ref: '#/components/schemas/models.QueryMap'
    models.QueryMap:
      type: object
      additionalProperties: true
    models.QueryToken:
      type: object
      additionalProperties: false
      properties:
        object_id:
          description: Object IDs to query.
          type: array
          items:
            type: string
            format: uuid
        token_id:
          description: Token IDs to query.
          type: array
          items:
            type: string
        tag:
          description: tags to query.
          type: array
          items:
            type: string
    models.RotatedToken:
      type: object
      additionalProperties: false
      properties:
        new_token_id:
          type: string
        old_token_id:
          type: string
    models.TokenAggregatedMetadata:
      type: object
      additionalProperties: false
      properties:
        max_effective_expiration_time:
          description: Latest expiry of all tokens with the token ID (UTC).
          type: string
          format: date-time
    models.TokenMetadata:
      type: object
      additionalProperties: false
      properties:
        agg:
          $ref: '#/components/schemas/models.TokenAggregatedMetadata'
        reusable_token_id:
          description: ID reusability status of the tokens.
          type: boolean
        reversible:
          description: Whether the token is reversible or not.
          type: boolean
        scope:
          description: The scope of the tokens.
          type: string
        token_id:
          description: The shared ID of the tokens.
          type: string
        tokens:
          description: Metadata for the each token.
          type: array
          items:
            $ref: '#/components/schemas/models.TokenRefMetadata'
    models.TokenRefMetadata:
      type: object
      additionalProperties: false
      properties:
        creation_time:
          description: Creation time of the token (UTC).
          type: string
          format: date-time
        effective_expiration_time:
          description: Effective expiry time of the token (UTC).
          type: string
          format: date-time
        expiration_time:
          description: Expiry time of the token (UTC).
          type: string
          format: date-time
        object_id:
          description: The object of which the was were tokenized.
          type: string
          format: uuid
        tags:
          description: Tags attached to the token.
          type: array
          items:
            type: string
    models.TokenValue:
      type: object
      additionalProperties: false
      properties:
        token_id:
          description: The value of the token.
          type: string
      required:
        - token_id
    models.TokenizeRequest:
      type: object
      additionalProperties: false
      properties:
        fpprops:
          description: Format preserving properties names to be used by the template for the ID generation.
          items:
            type: string
          type: array
        fptemplate:
          description: Format preserving template to use. Keep empty to use UUID.
          type: string
        object_ids:
          description: Object IDs to tokenize.
          items:
            type: string
            format: uuid
          type: array
        props:
          description: The properties to tokenize.
          items:
            type: string
          type: array
        reuse_token_id:
          default: false
          description: Whether the token ID can be reused if tokenizing the same data.
          type: boolean
        reversible:
          default: true
          description: Whether the token can be detokenized.
          type: boolean
        scope:
          default: default
          description: Uniqueness scope of the token.
          type: string
        tags:
          description: Tags to attach to the token (max 10).
          items:
            type: string
          type: array
        type:
          description: Token type.
          enum:
            - pointer
            - value
          type: string
      required:
        - object_ids
        - props
        - type
    models.TransformationDoc:
      description: 'Details of a transformation that can be performed on a PII data type within a collection. Note: `pii_type_id` and `name` together are also a unique identifier of a transformation in a collection.'
      type: object
      additionalProperties: false
      properties:
        configuration:
          $ref: '#/components/schemas/models.ConfigurationDoc'
        name:
          description: The name of the transformation.
          example: mask
          type: string
        pii_type_name:
          description: The name of the PII type.
          example: email
          readOnly: true
          type: string
    models.UpdateTokenRequest:
      type: object
      additionalProperties: false
      properties:
        tags:
          description: Replacement tags for the token.
          items:
            type: string
          type: array
    piitype.PIIType:
      type: object
      additionalProperties: false
      properties:
        description:
          description: The description of the PII type.
          example: a string of up to 450 characters
          readOnly: true
          type: string
        name:
          description: The name of the PII type.
          example: STRING
          readOnly: true
          type: string
    models.AllGenerations:
      type: object
      additionalProperties: false
      properties:
        vault:
          $ref: '#/components/schemas/models.VaultGeneration'
        workers:
          description: Workers generations.
          type: array
          items:
            $ref: '#/components/schemas/models.Worker'
    models.VaultGeneration:
      description: 'Vault Generation.'
      type: object
      additionalProperties: false
      properties:
        generation_number:
          description: Generation number.
          type: integer
        modified_at:
          description: Modified at.
          type: string
          format: date-time
    models.Worker:
      description: 'Worker.'
      type: object
      additionalProperties: false
      properties:
        worker_id:
          description: Worker id.
          type: integer
        generation_number:
          description: Generation number.
          type: integer
        modified_at:
          description: Modified at.
          type: string
          format: date-time
        refresh_interval_seconds:
          description: Refresh interval in seconds.
          type: integer
    models.APIKey:
      type: object
      additionalProperties: false
      properties:
        api_key:
          description: The new API key generated for the user.
          example: 'some_user'
          type: string
        api_key_expiry:
          description: The expiry time of the API key.
          example: '2022-07-05T08:47:12.047Z'
          type: string
          format: date-time
    rest.HTTPError:
      type: object
      additionalProperties: false
      properties:
        context:
          type: object
          additionalProperties:
            type: string
          description: The error context.
          example:
            object_id: abc
        error_code:
          description: The error code.
          example: 'PVxxxx'
          type: string
        message:
          description: The error message.
          example: 'The object is not found.'
          type: string
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-text-ref-description: '../bearer-auth.md'
